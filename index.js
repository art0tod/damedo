const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const unirest = require('unirest');
const cheerio = require('cheerio');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

// Insert the Telegram token into the .env
const token = process.env.TG_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// Insert the chat ID into the .env
const chatId = process.env.CHAT_ID;

const downloadImage = async (url, filename) => {
    const response = await axios({
        url,
        responseType: 'stream',
    });

    const writer = fs.createWriteStream(filename);

    response.data.pipe(writer);

    return new Promise((resolve, reject) => {
        writer.on('finish', () => resolve(filename));
        writer.on('error', reject);
    });
};

const checkAndRemoveImages = (imageDir, maxDirSizeMB, imagesData) => {
    const dirSize = getDirectorySize(imageDir);
    const maxSizeBytes = maxDirSizeMB * 1024 * 1024;

    if (dirSize > maxSizeBytes && imagesData.length > 0) {
        const files = fs.readdirSync(imageDir);
        const imagesToRemove = files.slice(0, imagesData.length);

        imagesToRemove.forEach(file => {
            const filePath = path.join(imageDir, file);
            fs.unlinkSync(filePath);
        });

        console.log(`Removed ${imagesToRemove.length} images to reduce directory size.`);
    }
};

const getDirectorySize = (dir) => {
    let totalSize = 0;

    const files = fs.readdirSync(dir);
    files.forEach(file => {
        const filePath = path.join(dir, file);
        const stats = fs.statSync(filePath);
        totalSize += stats.size;
    });

    return totalSize;
};

const selectRandom = () => {
    const userAgents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.157 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36",
    ];
    const randomNumber = Math.floor(Math.random() * userAgents.length);
    return userAgents[randomNumber];
};

let query = "—Ä–∂–∞—á–Ω—ã–π –º–µ–º";
const query_lang = "ru";

const getImagesData = async () => {
    const user_agent = selectRandom();
    const header = { "User-Agent": `${user_agent}` };
    
    const formatQuery = query => query.trim().toLowerCase().replace(/\s+/g, '+');
    const formatedQuery = formatQuery(query);

    const response = await unirest
        .get(
            `https://www.google.com/search?q=${encodeURIComponent(formatedQuery)}&hl=${query_lang}&tbs=qdr:w&tbm=isch&asearch=ichunk&async=_id:rg_s,_pms:s,_fmt:pc&sourceid=chrome&ie=UTF-8`
        )
        .headers(header)
        .encoding('utf-8');

    let $ = cheerio.load(response.body);

    let images_results = [];
    $("div.rg_bx").each((i, el) => {
        let json_string = $(el).find(".rg_meta").text();
        images_results.push({
            title: $(el).find(".iKjWAf .mVDMnf").text(),
            source: $(el).find(".iKjWAf .FnqxG").text(),
            link: JSON.parse(json_string).ru,
            original: JSON.parse(json_string).ou,
            thumbnail: $(el).find(".rg_l img").attr("src") ? $(el).find(".rg_l img").attr("src") : $(el).find(".rg_l img").attr("data-src"),
        });
    });

    return images_results;
};

const saveAndSendRandomImage = async (chatId) => {
    try {
        const imagesData = await getImagesData();
        const randomImage = imagesData[Math.floor(Math.random() * imagesData.length)];

        const imageUrl = randomImage.original;
        const imageDir = path.join(__dirname, 'images');
        if (!fs.existsSync(imageDir)) {
            fs.mkdirSync(imageDir);
        }

        const filename = path.join(imageDir, `${Date.now()}.jpg`);
        await downloadImage(imageUrl, filename);

        console.log('Image saved:', filename);

        checkAndRemoveImages(imageDir, 100, imagesData);

        const fileCount = fs.readdirSync(imageDir).length;

        const message = `

*üòÑ –†–∞–Ω–¥–æ–º–Ω—ã–π –º–µ–º –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ‚Ññ ${fileCount} üòÅ*
*–ò—Å—Ç–æ—á–Ω–∏–∫:* [–°—Å—ã–ª–∫–∞](${randomImage.link})
*–î–∏—Å–∫–ª–µ–π–º–µ—Ä:*
_–î–∞–Ω–Ω—ã–π –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –º–µ–º—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –≤–∑—è—Ç—ã–µ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤._
_–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∞–≤—Ç–æ—Ä –±–æ—Ç–∞ –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π,_
_—Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º._
_–ï—Å–ª–∏ –≤—ã –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–º–µ–π—Ç–µ —ç—Ç–æ –≤ –≤–∏–¥—É._

        `;

         const options = {
            caption: message,
            parse_mode: 'Markdown',
            disable_notification: true,
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üòÇ –ï—â—ë –º–µ–º ü§£', callback_data: 'get_meme' }],
                    [{ text: 'üò± –£–¥–∞–ª–∏—Ç—å, —ç—Ç–æ –Ω–µ –º–µ–º! üò∞', callback_data: 'delete' }]
                ]
            }
        };

        const sentMessage = await bot.sendPhoto(chatId, filename, options);

    } catch (error) {
        console.error('Error saving and sending image:', error);
    }
};

// The task runs every N minutes
const N = '60';
cron.schedule(`*/${N} * * * *`, () => saveAndSendRandomImage(chatId));

saveAndSendRandomImage(chatId);

bot.on('message', msg => {
    const { id } = msg.chat;
    console.log('Chat ID:', id);
});

bot.onText(/\/start/, msg => {
    const { id } = msg.chat;

    const message = `

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
- /start
- /about
- /meme

        `;

    bot.sendMessage(id, message, { parse_mode: 'HTML' });
});

bot.onText(/\/about/, msg => {
    const { id } = msg.chat;

    const message = `

<b>–û –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ:</b>
- <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞:</b> @art0tod
- <b>–¶–µ–ª—å –±–æ—Ç–∞:</b> –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏e –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —ç–º–æ—Ü–∏–π.
- <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b> –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∑–∞–¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –ø–æ–¥–ø–∏—Å—å—é —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –ø—Ä–æ—á–µ–π –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
- <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b> –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É (–æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å /meme, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç.
        `;

    bot.sendMessage(id, message, { parse_mode: 'HTML' });
});

bot.onText(/\/meme/, async (msg) => {
    const { id } = msg.chat;
    await saveAndSendRandomImage(id);
});

bot.on('callback_query', async (callbackQuery) => {
    const { message_id, chat: { id } } = callbackQuery.message;
    const data = callbackQuery.data;

    try {
        if (data === 'get_meme') {
            await saveAndSendRandomImage(id);
        } else if (data === 'delete') {
            await bot.deleteMessage(id, message_id);
        }
        await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
        console.error('Error handling callback query:', error);
    }
});

